#!/usr/bin/env ruby

require '../ext/gmp'

RSA_EXP = 0x10001

def rsa_sign(smsg, msg, p, q, pq, p_i_q, dp, dq)
  pr = msg.powmod(dp, p)
  qr = msg.powmod(dq, q)
  
  qr_m_pr = qr - pr
  
  t = qr_m_pr * p_i_q
  o = t % q
  
  t = o * p
  smsg  = pr + t
  smsg %= pq
end

n = ARGV[0].to_i
random_state = GMP::RandState.new

print "Generating p, q, d..."
STDOUT.flush

pq = GMP::Z()
while pq != 1
  p = random_state.urandomb(n/2)
  p[n/2 - 1] = true
  p[n/2 - 2] = true
  p[0]       = true
  
  q = random_state.urandomb(n/2)
  q[n/2 - 1] = true
  q[n/2 - 2] = true
  q[0]       = true
  
  pq = p.gcd(q)
end

pq = p * q

e = GMP::Z(RSA_EXP)

pm1 = p - 1
qm1 = q - 1
phi = pm1 * qm1
d = e.invert(phi)

t = GMP::time { z = x.tdiv y }
iterations = (1 + (1e4 / t)).to_i

print "Dividing an %i-bit number by an %i-bit number %i times..." % [dividend, divisor, iterations]
STDOUT.flush

t0 = GMP::cputime
iterations.times do
  z = x.tdiv y
end
ti = GMP::cputime - t0
  
puts "done!"
ops_per_sec = 1000.0 * iterations / ti
f = 100.0
decimals = 0
while true
  decimals += 1
  break if ops_per_sec > f
  f = f * 0.1
end

puts "RESULT: %#{decimals}f operations per second\n" % ops_per_sec