#include <mprnd.h>

VALUE r_mprndsg_new(int argc, VALUE *argv, VALUE klass)
{
  mp_rnd_t res_val;
  VALUE res;
  ID GMP_RNDN_ID = rb_intern("GMP_RNDN");
  ID GMP_RNDZ_ID = rb_intern("GMP_RNDZ");
  ID GMP_RNDU_ID = rb_intern("GMP_RNDU");
  ID GMP_RNDD_ID = rb_intern("GMP_RNDD");
  VALUE GMP_RNDN_SYM = ID2SYM(GMP_RNDN_ID);
  VALUE GMP_RNDZ_SYM = ID2SYM(GMP_RNDZ_ID);
  VALUE GMP_RNDU_SYM = ID2SYM(GMP_RNDU_ID);
  VALUE GMP_RNDD_SYM = ID2SYM(GMP_RNDD_ID);
  ID eqeq = rb_intern("==");

  (void)klass;

  if (argc != 1)
    rb_raise(rb_eArgError, "wrong # of arguments (%d for 1)", argc);

  mprnd_make_struct (res, res_val);
  if (rb_funcall (argv[0], eqeq, GMP_RNDN_SYM) == Qtrue) { res_val = GMP_RNDN; }
  else if (rb_funcall (argv[0], eqeq, GMP_RNDZ_SYM) == Qtrue) { res_val = GMP_RNDZ; }
  else if (rb_funcall (argv[0], eqeq, GMP_RNDU_SYM) == Qtrue) { res_val = GMP_RNDU; }
  else if (rb_funcall (argv[0], eqeq, GMP_RNDD_SYM) == Qtrue) { res_val = GMP_RNDD; }
  // else throw a big error. why is the user calling this anyway? wtf?
  //mprnd_init (res_val);
  rb_obj_call_init (res, argc, argv);

  return res;
}

VALUE r_mprnd_initialize(int argc, VALUE *argv, VALUE self)
{
  MP_INT *self_val;

  if (argc != 0) {
    mprnd_get_struct (self, self_val);
    mprnd_set_value (self_val, argv[0]);
  }
  return Qnil;
}